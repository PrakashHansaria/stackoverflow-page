import React from 'react';
import './App.css';
import './bootstrap-4.5.0-dist/css/bootstrap.min.css';
import './fontawesome-free-5.13.0-web/css/all.css';
import './mycss.css';
import Header from './components/Header'
import LeftSidebar from './components/LeftSidebar'
import Question from './components/Question'
import QuestionHeader from './components/QuestionHeader'
import Answer from './components/Answer'
import BlogSidebar from './components/BlogSidebar'
import LinksSidebar from './components/LinksSidebar';
import RelatedSidebar from './components/RelatedSidebar'
import Home from './components/Home'
import Tags from './components/Tags'
import Users from './components/Users'
import Jobs from './components/Jobs'

class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      questionV: 135,

      answerV: [
        {
          value: 188,
          comments: true,
          accepted: true,
          content: `
          Let's take an example — though a very naive one: If you have something messed up
          in a room in your home and you need to clean it, what will be your first step?
          Will you be cleaning your room which is messed up or the whole house? The answer
          is definitely that you will be cleaning only the room which requires the cleaning.
          That's what the virtual DOM does
          Ordinary JS traverses or renders the whole DOM instead of rendering only
          the part which requires changes.
          So whenever you have any changes, as in you want to add another 'div' to your
          DOM then the virtual DOM will be created which actually does not do any changes
          in the actual DOM. Now with this virtual DOM, you will be checking the difference
          between this and your current DOM. And only the part which is different
          (in this case the new 'div') will be added instead of re-rendering the whole DOM.`,
        },
        {
          value: 45,
          comments: false,
          accepted: false,
          content: `
          React creates a tree of custom objects representing a part of the DOM. For
          example, instead of creating an actual DIV element containing a UL element,
          it creates a React.div object that contains a React.ul object. It can manipulate
          these objects very quickly without actually touching the real DOM or
          going through the DOM API. Then, when it renders a component, it uses this
          virtual DOM to figure out what it needs to do with the real DOM to get the two
          trees to match.        
          You can think of the virtual DOM like a blueprint. It contains all the details
          needed to construct the DOM, but because it doesn't require all the heavyweight
          parts that go into a real DOM, it can be created and changed much more easily.`,
        },
        {
          value: 20,
          comments: true,
          accepted: false,
          content: `
          What is the virtual DOM? 
          The virtual DOM is an in-memory representation of the real DOM elements generated by React components before any changes are made to the page.
          enter image description here
          It’s a step that happens between the render function being called and the displaying of elements on the screen.
          A component’s render method returns some markup, but it’s not the final HTML yet. It’s the in-memory representation of what will become real elements (this is step 1). Then that output will be transformed into real HTML, which is what gets displayed in the browser (This is step 2).
          So why go through all this to generate a virtual DOM? Simple answer — This is what allows react to be fast. It does this by means of virtual DOM diffing. Comparing two virtual trees — old and new — and make only the necessary changes into the real DOM.`,
        },
      ],
      bookmark: {
        value: 15,
        set: false,
      },
      buttonStatus: {
        active: false,
        oldest: false,
        votes: true,
      },
      renderval : null,
      renderMap:{
        home:<Home />,
        tags:<Tags />,
        users:<Users />,
        jobs:<Jobs />
      }
    };
  }

  handleQuestionUpVotes = (value) => {
    value++;
    this.setState({ questionV: value })
  }

  handleQuestionDownVotes = (value) => {
    value--;
    this.setState({ questionV: value })
  }

  handleBookmark = (value) => {
    console.log(value)
    if (!this.state.bookmark.set) {
      value++;
    }
    else {
      value--;
    }
    const newBookmark = this.state.bookmark
    newBookmark.value = value
    newBookmark.set = !newBookmark.set
    this.setState({ bookmark: newBookmark })
  }

  handleAnswerUpVotes(index, value) {
    value++;
    const newVotes = [...this.state.answerV]
    newVotes[index].value = value;
    this.setState({ answerV: newVotes })
  }

  handleAnswerDownVotes(index, value) {
    value--;
    const newVotes = [...this.state.answerV]
    newVotes[index].value = value;
    this.setState({ answerV: newVotes })
  }

  handleAnswerActive = () => {
    const newAnswer = [...this.state.answerV]
    console.log(newAnswer)
    newAnswer.sort((a, b) => a.content.length > b.content.length ? 1 : -1)
    const newButtonStatus = this.state.buttonStatus
    if (!newButtonStatus.active) {
      newButtonStatus.active = true
      newButtonStatus.votes = false
      newButtonStatus.oldest = false
    }
    this.setState({ answerV: newAnswer, buttonStatus: newButtonStatus })
  }

  handleAnswerVotes = () => {
    const newAnswer = [...this.state.answerV]
    console.log(newAnswer)
    newAnswer.sort((a, b) => a.value > b.value ? -1 : 1)
    const newButtonStatus = this.state.buttonStatus
    if (!newButtonStatus.votes) {
      newButtonStatus.votes = true
      newButtonStatus.active = false
      newButtonStatus.oldest = false
    }
    this.setState({ answerV: newAnswer, buttonStatus: newButtonStatus })
  }

  handleAnswerOldest = () => {
    const newAnswer = [...this.state.answerV]
    console.log(newAnswer)
    newAnswer.sort((a, b) => a.value > b.value ? 1 : -1)
    const newButtonStatus = this.state.buttonStatus
    if (!newButtonStatus.oldest) {
      newButtonStatus.oldest = true
      newButtonStatus.active = false
      newButtonStatus.votes = false
    }
    this.setState({ answerV: newAnswer, buttonStatus: newButtonStatus })
  }

  handleHome = () => {
    this.setState({renderval:this.state.renderMap.home})
  }
  
  handleMain = () => {
    this.setState({renderval:null})
  }

  handleTags = () => {
    this.setState({renderval:this.state.renderMap.tags})
  }
  
  handleUsers = () => {
    this.setState({renderval:this.state.renderMap.users})
  }

  handleJobs = () => {
    this.setState({renderval:this.state.renderMap.jobs})
  }


  render() {

    const answers = this.state.answerV.map((answerObj, index) => {
      return (
        <Answer
          accepted={answerObj.accepted}
          comments={answerObj.comments}
          onClickUp={() => this.handleAnswerUpVotes(index, answerObj.value)}
          onClickDown={() => this.handleAnswerDownVotes(index, answerObj.value)}
          vote={answerObj.value}
          content={answerObj.content}
        />)
    })

    const mainDiv = (
      <main role="main" className="col-sm-10 p-4 ">
        <QuestionHeader />
        <div className="row justify-content-between">
          <div className="col-lg-8">
           
            <Question
              votes={this.state.questionV}
              bookmark={this.state.bookmark.value}
              onClickUp={() => this.handleQuestionUpVotes(this.state.questionV)}
              onClickDown={() => this.handleQuestionDownVotes(this.state.questionV)}
              onClickBookmark={() => this.handleBookmark(this.state.bookmark.value)}
            />

            <div></div>

            <div className="row">
              <div className="col">
                <h5>{this.state.answerV.length} Answers</h5>
              </div>
              <div className="col text-right">
                <div className="btn-group float-roght" role="group" aria-label="Basic example">
                  <button
                    className={this.state.buttonStatus.active ? "btn btn-secondary" : "btn btn-outline-secondary"}
                    onClick={this.handleAnswerActive} >Active
                </button>

                  <button
                    className={this.state.buttonStatus.oldest ? "btn btn-secondary" : "btn btn-outline-secondary"}
                    onClick={this.handleAnswerOldest}>Oldest
                </button>

                  <button
                    className={this.state.buttonStatus.votes ? "btn btn-secondary" : "btn btn-outline-secondary"}
                    onClick={this.handleAnswerVotes}>Votes
                </button>
                </div>
              </div>
            </div>

            {answers}
          </div>

          <div className="col-lg-4 right-sidebar-component">
            <BlogSidebar />
            <LinksSidebar />
            <RelatedSidebar />
          </div>

        </div>
      </main>
    )
    const renderValue = this.state.renderval
    return (
      <div>

        <Header />
        <div className="container ">
          <div className="row ">

            <LeftSidebar 
            homeClick = {this.handleHome}
            mainClick = {this.handleMain}
            tagsClick = {this.handleTags}
            userClick = {this.handleUsers} 
            jobsClick = {this.handleJobs}
            />

            {renderValue===null?
            mainDiv:
            renderValue
            }
          </div>
        </div >
      </div >
    )
  }
}

export default App;
